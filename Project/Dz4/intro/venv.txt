Віртуальне оточення
1. Перевіряємо налаштування пакентного менеджера
> pip --version
pip 24.3.1 from C:\Python\Python313\Lib\site-packages\pip (python 3.13)

! якщо "не розпізнано", то
 - перевіряємо чи встановлений Python
 - знаходимо його розташування
 - додаємо шлях до директорії Scripts до системної змінної Path
    (або використовуємо повний шлях до файлу у командному рядку)

2. Обираємо робочу директорію і створюємо в ній віртуальне середовище
source\repos> python -m venv PyWebP33
якщо не запускається, то зазначаємо повний шлях до python.exe, у разі у 
шляху є пробіли (чи інші нелатинські символи), то беремо шлях у "" та додаємо
інструкцію запуску "&"
PS> & "C:\Users\...\python.exe"  -m venv PyWebP33

2.1. Переводимо термінал до цього оточення
> cd PyWebP33

3. Активуємо віртуальне оточення - запускаємо активатор з директорії
/Scripts у встановленому оточенні
 - при використанні PowerShell / Terminal
    PS> ./Scripts/Activate.ps1
    (PyWebP33) PS>
 - Command Prompt   
    > ./Scripts/activate.bat
!! активація віртуального середовища необхідна при кожному початку роботи    

4. Встановлюємо Django у віртуальному середовищі
(PyWebP33) PS> python -m pip install Django

5. Налаштовуємо файл .gitignore - беремо зразок з GitHub рекомендацій

6. Перевіряємо успішність встановлення запуском інструмента адміністратора
(PyWebP33) PS> django-admin --version
5.2.7

6.1. За допомогою адмін-інструмента створюємо проєкт
(PyWebP33) PS> django-admin startproject Project33
У файлах додається директорія з іменем проєкту. Переходимо до неї
та 
6.2. перевіряємо роботу сервера
(PyWebP33) PS> cd project33
(PyWebP33) PS\project33> python manage.py runserver
відкриваємо у браузері адресу  http://127.0.0.1:8000/
(або виконуємо Ctrl-Click по надпису у консолі)
Натискаємо Ctrl-C для зупинки сервера

7. Створюємо застосунок (Аррlication)
(PyWebP33) PS> python manage.py startapp App33
У файлах проєкту (Project33) додається директорія з іменем проєкту (App33)

-------------------- MVT : Model-View-Template -------------
Модель - постачальник даних, зазвичай це об'єкт, відображений на БД 
 з можливістю CRUD операцій
Представлення (View) - форма відображення даних для споживача інформації 
Шаблон (Template) - "заготовка" для формування представлення з даних, що
 передаються моделями.
-------------------------------------------------------------

8. Створюємо представлення - оголошуємо ф-цію hello у файлі views.py 
(деталі - у файлі)

9. Створюємо маршрутизатор - додаємо файл urls.py до застосунку (App33)
 (такий файл також існує проєкті - не плутати!) деталі у файлі. 
 Змінюємо проєктний файл urls.py, додаємо до нього підключення 
 маршрутизатора застосунку (деталі у файлі + коментар з інструкціями)

10. Реєструємо наш застосунок у проєкті: у файлі settings.py (проєкту)
 знаходимо оголошення для INSTALLED_APPS і додаємо App33

11. Фіксуємо зміни за допомогою міграцій
(PyWebP33) PS\project33> python manage.py migrate

12. Запускаємо сервер (п.6.2), у браузері переходимо на /hello

Практика: створити стартову (домашню) сторінку "index", до якої буде
перехід за порожньою адресою

Додати до сайту декілька сторінок: /privacy, /about
Розмістити на головній сторінці посилання на них, переконатись
у правильності переходів.
До звіту з ДЗ додати скріншоти або запис робочого столу.