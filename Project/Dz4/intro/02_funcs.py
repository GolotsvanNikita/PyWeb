def func1() :
    print("Func 1")


def func1() :            # переозначення ф-ції не спричинює помилок
    print("Func -- 1")   # а замінює попередню декларацію


x = 10               # глобальна змінна
                     # будь-яке звернення до змінної за іменем починає її пошук
def get_x() :        # 1) у локальній області
    return x         # 2) серед параметрів (у параметричній області)
                     # 3) capture - область захвату (лексикографічний окіл, closure)
def set_x(value) :   # 4) у більш глобальні області
    x = value        # - відмінність полягає у тому, що get_x ставить питання "читати" set_x "присвоювати"

def set_global_x(value) :    # для доступу до глобальних змінних необхідно              
    global x                 # до звернення зазначити "global"
    x = value                #   


def show(                    # Типізація параметрів задається через ":", значення за замовчанням
        x:int=10,            # (якщо потрібно) - через "="
        y:int=20,            # Тип повернення - задається стрілкою
        w:int=30) -> None :  # Документуючий коментар - перший рядок (string) після оголошення ф-ції
    '''Дана функція демонструє 
       типізацію параметрів та повернення,
     
       а також можливість передати значення за замовчанням
       
       та передачу аргументів за іменами'''
                             # Після коментаря залишають порожній рядок (традиційно)
    print(x, y, w)           # Тому між функціями прийнято залишати щонайменше два рядки


def main() :
    func1()
    print("x =", get_x())
    set_x(20)
    print("x =", get_x())
    set_global_x(value=20)
    print("x =", get_x())
    show(40)                # позиційне звернення - до першого параметра
    show(y=50)              # іменоване звернення - до параметра "y"
    show(w="Hello")         # наявність типів не обмежує їх, лише дає підказки

    r1 = range(1, 11, 2)    # генератор послідовності
    print(r1)               # генератори дозволяють ітерувати послідовність не формуючи її цілком
    for i in r1 : 
        print(i, end=' ')
    print()
    print(*r1)

    x = input("Enter x = ")
    print(x)


if __name__ == "__main__" : main()

'''
Д.З. Реалізувати функцію, яка запитує у користувача два числа
та виводить усі цілі числа, що є між ними (включно з введеними)
Наприклад:
Введіть два числа: 2, 5
2, 3, 4, 5
Введіть два числа: 5, 2
5, 4, 3, 2
Якщо числа однакові, то виводити тільки одне з них
До звіту з ДЗ додати скріншоти результатів виконання програми
'''